# DESCRIPTION
# Takes a list of images presuably sorted by next most similar (`IMGlistByMostSimilar.txt`, which can be generated by the script `imgsGetSimilar.sh`), and presents an image viewer to navigate over the images in the order they are listed, and optionally discard any unwanted images in the sequence into a _discards subfolder.

# SOURCE
# This code of this script was written almost entirely by an AI in collaboration with a human (yours truly), with breathtaking exactness of what was requested (minus a few minor quickly fixed oversights). The conversation that developed it is at: https://chat.openai.com/share/095b6108-aa38-4687-9521-0b19773625af

# DEPENDENCIES
# Python with the tkinter library installed, a populated image file list `IMGlistByMostSimilar.txt` (or other file name; see comments of `imgsGetSimilar.sh`), and image files in that list in the same directory also.

# USAGE
# Call this script from python, with these parameters to Python and the script:
# - REQUIRED sys.argv[0] (for Python) : the path to this script; e.g:
#    /path/to/reduceIMGsimilarAssistant.py
# - OPTIONAL sys.argv[1] name of a text file which is a list of images ordered (for example by next most similar image). Such a file may be made by `imgsGetSimilar.sh` etc. If omitted, the script defaults to search for `IMGlistByMostSimilar.txt` in the directory your run this from, and assumes that is the list if it finds it. The images in the list file should be in the same directory.
# For example, to run this script without specifying the file name of the list of image comparisons, and use the default `IMGlistByMostSimilar.txt`:
#    python /path/to/reduceIMGsimilarAssistant.py
# Or if your comparison list file is named imageSorting01.txt, run:
#    python /path/to/reduceIMGsimilarAssistant.py imageSorting01.txt
# On launch, the script displays the first image in the list, with buttons to advance forward and backward through the list of images or delete them. Use the left arrow key or 'Back' button to navigate up (back) in the list, or the right arrow key or 'Forward' button to navigate forward in the list, and the 'Delete' key or button to move a viewed image into a _discards subfolder.


# CODE
import tkinter as tk
from tkinter import ttk
import os
import sys
import re

if len(sys.argv) > 1:       # positional parameter 1
    file_list = sys.argv[1]
    print('\nList file name (parameter 1) passed to script; using that:', file_list)
else:
    file_list = "IMGlistByMostSimilar.txt"
    print('\nNo list file name (parameter 1) passed to script; defaulted to:', file_list)

# Initialize the main window
root = tk.Tk()
root.title("IMGlistByMostSimilar Reduce Assistant (list: " + file_list + ")")  # Updated window title

# Create a frame for the image and navigation buttons
frame = ttk.Frame(root)
frame.pack(fill=tk.BOTH, expand=True)

# Create a label for displaying the image
image_label = ttk.Label(frame)
image_label.pack(fill=tk.BOTH, expand=True)

# Create labels for displaying the file name
file_label = ttk.Label(frame, text="")
file_label.pack(fill=tk.BOTH, expand=True)

# Define a subfolder for discarded images
discard_folder = "_discards"

# Regex pattern to extract the file name
pattern = r"[^'\"\s]+\.png"

# Load image file list from IMGlistByMostSimilar.txt
image_files = []
with open(file_list, "r") as file_list:
    for line in file_list:
        match = re.search(pattern, line)
        if match:
            image_files.append(match.group())

current_index = 0  # Current index of the displayed image

# Function to display the current image
def display_image(index):
    global current_index
    image_files_len = len(image_files)
    while True:
        if 0 <= index < len(image_files):
            current_index = index
            print_index = str(current_index + 1)
            image_file = image_files[current_index]
            if os.path.isfile(image_file):
                file_label.config(text=image_file + "\t(" + print_index + " of " + str(image_files_len) + ")")
                image = tk.PhotoImage(file=image_file)
                image_label.config(image=image)
                image_label.photo = image
                image_label.update_idletasks()
                break
            else:
                image_files.remove(image_file)
                image_files_len = len(image_files)
        index += 1
        if index >= len(image_files):
            print("No valid images found.")
            break


# Function to navigate to the next image
def next_image():
    display_image(current_index + 1)

# Function to navigate to the previous image
def previous_image():
    display_image(current_index - 1)

# Function to delete the current image
def delete_image():
    # check for this folder on every discard attempt because I would rather not presume to create an empty subfolder on loading the script if I end up discarding nothing. (Even if this may end up causing redundant wasteful checks):
    if not os.path.exists(discard_folder):
        os.mkdir(discard_folder)
    global current_index
    if 0 <= current_index < len(image_files):
        image_file = image_files[current_index]
        discarded_path = os.path.join(discard_folder, os.path.basename(image_file))
        os.rename(image_file, discarded_path)
        del image_files[current_index]
        if current_index >= len(image_files):
            current_index = len(image_files) - 1
        display_image(current_index)
        # Update the IMGlistByMostSimilar.txt file
        with open("IMGlistByMostSimilar.txt", "w") as file_list:
            for image_file in image_files:
                file_list.write(f"file '{image_file}'\n")

# Create navigation buttons
previous_button = ttk.Button(frame, text="Back (left arrow key)", command=previous_image)
next_button = ttk.Button(frame, text="Forward (right arrow key)", command=next_image)
delete_button = ttk.Button(frame, text="Sort to _discards (delete key)", command=delete_image)

previous_button.pack(side=tk.LEFT)
next_button.pack(side=tk.LEFT)
delete_button.pack(side=tk.LEFT)

# Display the first image
display_image(current_index)

# Function to handle keypress events
def on_key(event):
    if event.keysym == "Left":  # Left arrow key
        previous_image()
    elif event.keysym == "Right":  # Right arrow key
        next_image()
    elif event.keysym == "Delete":  # Delete key
        delete_image()
    elif event.keysym == "Escape":  # Escape key
        sys.exit()

# Bind keypress events to the root window
root.bind("<Left>", on_key)
root.bind("<Right>", on_key)
root.bind("<Delete>", on_key)
root.bind("<Escape>", on_key)

# Run the Tkinter main loop
root.mainloop()
